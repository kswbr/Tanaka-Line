// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tanaka.proto

package tanaka

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetLatestTanakaNewsMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLatestTanakaNewsMessage) Reset()         { *m = GetLatestTanakaNewsMessage{} }
func (m *GetLatestTanakaNewsMessage) String() string { return proto.CompactTextString(m) }
func (*GetLatestTanakaNewsMessage) ProtoMessage()    {}
func (*GetLatestTanakaNewsMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_df7d735c7715a3d8, []int{0}
}

func (m *GetLatestTanakaNewsMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLatestTanakaNewsMessage.Unmarshal(m, b)
}
func (m *GetLatestTanakaNewsMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLatestTanakaNewsMessage.Marshal(b, m, deterministic)
}
func (m *GetLatestTanakaNewsMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestTanakaNewsMessage.Merge(m, src)
}
func (m *GetLatestTanakaNewsMessage) XXX_Size() int {
	return xxx_messageInfo_GetLatestTanakaNewsMessage.Size(m)
}
func (m *GetLatestTanakaNewsMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestTanakaNewsMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestTanakaNewsMessage proto.InternalMessageInfo

type LatestTanakaNewsResponse struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Link                 string   `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LatestTanakaNewsResponse) Reset()         { *m = LatestTanakaNewsResponse{} }
func (m *LatestTanakaNewsResponse) String() string { return proto.CompactTextString(m) }
func (*LatestTanakaNewsResponse) ProtoMessage()    {}
func (*LatestTanakaNewsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df7d735c7715a3d8, []int{1}
}

func (m *LatestTanakaNewsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LatestTanakaNewsResponse.Unmarshal(m, b)
}
func (m *LatestTanakaNewsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LatestTanakaNewsResponse.Marshal(b, m, deterministic)
}
func (m *LatestTanakaNewsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestTanakaNewsResponse.Merge(m, src)
}
func (m *LatestTanakaNewsResponse) XXX_Size() int {
	return xxx_messageInfo_LatestTanakaNewsResponse.Size(m)
}
func (m *LatestTanakaNewsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestTanakaNewsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LatestTanakaNewsResponse proto.InternalMessageInfo

func (m *LatestTanakaNewsResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *LatestTanakaNewsResponse) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func init() {
	proto.RegisterType((*GetLatestTanakaNewsMessage)(nil), "GetLatestTanakaNewsMessage")
	proto.RegisterType((*LatestTanakaNewsResponse)(nil), "LatestTanakaNewsResponse")
}

func init() { proto.RegisterFile("tanaka.proto", fileDescriptor_df7d735c7715a3d8) }

var fileDescriptor_df7d735c7715a3d8 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x49, 0xcc, 0x4b,
	0xcc, 0x4e, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe1, 0x92, 0x72, 0x4f, 0x2d, 0xf1,
	0x49, 0x2c, 0x49, 0x2d, 0x2e, 0x09, 0x01, 0x4b, 0xf8, 0xa5, 0x96, 0x17, 0xfb, 0xa6, 0x16, 0x17,
	0x27, 0xa6, 0xa7, 0x2a, 0xb9, 0x70, 0x49, 0xa0, 0x4b, 0x05, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15,
	0xa7, 0x0a, 0x89, 0x70, 0xb1, 0x96, 0x64, 0x96, 0xe4, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x06, 0x41, 0x38, 0x42, 0x42, 0x5c, 0x2c, 0x39, 0x99, 0x79, 0xd9, 0x12, 0x4c, 0x60, 0x41, 0x30,
	0xdb, 0x28, 0x80, 0x8b, 0xd9, 0x39, 0xb1, 0x44, 0xc8, 0x93, 0x8b, 0xd7, 0x3d, 0x15, 0xc9, 0x24,
	0x21, 0x69, 0x3d, 0xdc, 0x56, 0x4b, 0x49, 0xea, 0xe1, 0xb2, 0x59, 0x89, 0x21, 0x89, 0x0d, 0xec,
	0x78, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xbb, 0xed, 0x74, 0xcc, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CatClient is the client API for Cat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CatClient interface {
	GetTanakaNews(ctx context.Context, in *GetLatestTanakaNewsMessage, opts ...grpc.CallOption) (*LatestTanakaNewsResponse, error)
}

type catClient struct {
	cc *grpc.ClientConn
}

func NewCatClient(cc *grpc.ClientConn) CatClient {
	return &catClient{cc}
}

func (c *catClient) GetTanakaNews(ctx context.Context, in *GetLatestTanakaNewsMessage, opts ...grpc.CallOption) (*LatestTanakaNewsResponse, error) {
	out := new(LatestTanakaNewsResponse)
	err := c.cc.Invoke(ctx, "/Cat/GetTanakaNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatServer is the server API for Cat service.
type CatServer interface {
	GetTanakaNews(context.Context, *GetLatestTanakaNewsMessage) (*LatestTanakaNewsResponse, error)
}

func RegisterCatServer(s *grpc.Server, srv CatServer) {
	s.RegisterService(&_Cat_serviceDesc, srv)
}

func _Cat_GetTanakaNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestTanakaNewsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatServer).GetTanakaNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cat/GetTanakaNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatServer).GetTanakaNews(ctx, req.(*GetLatestTanakaNewsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Cat",
	HandlerType: (*CatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTanakaNews",
			Handler:    _Cat_GetTanakaNews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tanaka.proto",
}
