// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tanaka.proto

package tanaka

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetLatestNewsMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLatestNewsMessage) Reset()         { *m = GetLatestNewsMessage{} }
func (m *GetLatestNewsMessage) String() string { return proto.CompactTextString(m) }
func (*GetLatestNewsMessage) ProtoMessage()    {}
func (*GetLatestNewsMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_df7d735c7715a3d8, []int{0}
}

func (m *GetLatestNewsMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLatestNewsMessage.Unmarshal(m, b)
}
func (m *GetLatestNewsMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLatestNewsMessage.Marshal(b, m, deterministic)
}
func (m *GetLatestNewsMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLatestNewsMessage.Merge(m, src)
}
func (m *GetLatestNewsMessage) XXX_Size() int {
	return xxx_messageInfo_GetLatestNewsMessage.Size(m)
}
func (m *GetLatestNewsMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLatestNewsMessage.DiscardUnknown(m)
}

var xxx_messageInfo_GetLatestNewsMessage proto.InternalMessageInfo

type LatestNewsResponse struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Link                 string   `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LatestNewsResponse) Reset()         { *m = LatestNewsResponse{} }
func (m *LatestNewsResponse) String() string { return proto.CompactTextString(m) }
func (*LatestNewsResponse) ProtoMessage()    {}
func (*LatestNewsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df7d735c7715a3d8, []int{1}
}

func (m *LatestNewsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LatestNewsResponse.Unmarshal(m, b)
}
func (m *LatestNewsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LatestNewsResponse.Marshal(b, m, deterministic)
}
func (m *LatestNewsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestNewsResponse.Merge(m, src)
}
func (m *LatestNewsResponse) XXX_Size() int {
	return xxx_messageInfo_LatestNewsResponse.Size(m)
}
func (m *LatestNewsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestNewsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LatestNewsResponse proto.InternalMessageInfo

func (m *LatestNewsResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *LatestNewsResponse) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func init() {
	proto.RegisterType((*GetLatestNewsMessage)(nil), "GetLatestNewsMessage")
	proto.RegisterType((*LatestNewsResponse)(nil), "LatestNewsResponse")
}

func init() { proto.RegisterFile("tanaka.proto", fileDescriptor_df7d735c7715a3d8) }

var fileDescriptor_df7d735c7715a3d8 = []byte{
	// 140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x49, 0xcc, 0x4b,
	0xcc, 0x4e, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x12, 0xe3, 0x12, 0x71, 0x4f, 0x2d, 0xf1,
	0x49, 0x2c, 0x49, 0x2d, 0x2e, 0xf1, 0x4b, 0x2d, 0x2f, 0xf6, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f,
	0x55, 0xb2, 0xe3, 0x12, 0x42, 0x08, 0x06, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x89,
	0x70, 0xb1, 0x96, 0x64, 0x96, 0xe4, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x38,
	0x42, 0x42, 0x5c, 0x2c, 0x39, 0x99, 0x79, 0xd9, 0x12, 0x4c, 0x60, 0x41, 0x30, 0xdb, 0xc8, 0x91,
	0x8b, 0x2d, 0x04, 0x6c, 0x8f, 0x90, 0x39, 0x17, 0xbb, 0x7b, 0x2a, 0xd8, 0x18, 0x21, 0x51, 0x3d,
	0x6c, 0x76, 0x49, 0x09, 0xeb, 0x61, 0x5a, 0xa5, 0xc4, 0x90, 0xc4, 0x06, 0x76, 0xa1, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0xd1, 0x6d, 0xd8, 0x20, 0xb1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TanakaClient is the client API for Tanaka service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TanakaClient interface {
	GetNews(ctx context.Context, in *GetLatestNewsMessage, opts ...grpc.CallOption) (*LatestNewsResponse, error)
}

type tanakaClient struct {
	cc *grpc.ClientConn
}

func NewTanakaClient(cc *grpc.ClientConn) TanakaClient {
	return &tanakaClient{cc}
}

func (c *tanakaClient) GetNews(ctx context.Context, in *GetLatestNewsMessage, opts ...grpc.CallOption) (*LatestNewsResponse, error) {
	out := new(LatestNewsResponse)
	err := c.cc.Invoke(ctx, "/Tanaka/GetNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TanakaServer is the server API for Tanaka service.
type TanakaServer interface {
	GetNews(context.Context, *GetLatestNewsMessage) (*LatestNewsResponse, error)
}

func RegisterTanakaServer(s *grpc.Server, srv TanakaServer) {
	s.RegisterService(&_Tanaka_serviceDesc, srv)
}

func _Tanaka_GetNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestNewsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TanakaServer).GetNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tanaka/GetNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TanakaServer).GetNews(ctx, req.(*GetLatestNewsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tanaka_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Tanaka",
	HandlerType: (*TanakaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNews",
			Handler:    _Tanaka_GetNews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tanaka.proto",
}
